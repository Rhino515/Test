<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>NorCal Trim Calculator</title>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<link href="manifest.json" rel="manifest"/>
<meta content="#000000" name="theme-color"/>
<style>
  body {
    background-color: black;
    color: white;
    font-family: 'Montserrat', sans-serif;
    text-align: center;
    padding: 2em;
  }
  input {
    font-size: 1.2em;
    padding: 0.5em;
    margin-top: 0.6em;
    width: 150px;
    background-color: #222;
    color: #fff;
    border: 1px solid #555;
    border-radius: 4px;
  }
  button {
    background-color: green;
    color: white;
    padding: 0.45em 1em;
    border: none;
    font-size: 1em;
    margin-top: 0.6em;
    border-radius: 4px;
    cursor: pointer;
  }
  button:hover {
    background-color: darkgreen;
  }
  img {
    margin-top: 0.6em;
    width: 200px;
  }
  #result {
    margin-top: 0.6em;
    font-size: 1.2em;
  }
  .install-links {
    margin-top: 0.6em;
  }
  .install-links a {
    display: inline-block;
    margin: 0.5em;
    padding: 0.5em 1em;
    color: white;
    background-color: #444;
    text-decoration: none;
    border-radius: 4px;
  }
  .install-links a:hover {
    background-color: #666;
  }
  table {
    margin: 2em auto;
    border-collapse: collapse;
    width: 80%;
  }
  th, td {
    border: 1px solid #555;
    padding: 0.5em;
  }
  th {
    background-color: #333;
  }
  td[contenteditable="true"] {
    background-color: #222;
  }
  .delete-button {
    background-color: red;
    color: white;
    border: none;
    padding: 0.3em 0.6em;
    cursor: pointer;
    border-radius: 4px;
  }
  .delete-button:hover {
    background-color: darkred;
  }
</style>
</head>
<body>
<div class="language-toggle" style="position:absolute;top:10px;right:10px;">
  <a href="index.html">English</a>
  <a href="index-es.html">Español</a>
</div>
<img alt="NorCal Logo" src="norcal_icon.png"/>
<p>Enter total grams trimmed:</p>
<input id="grams" placeholder="e.g. 1200" type="number"/>
<br/>
<button id="import-tracker-total">Add Today’s Trim Tracker Total</button>
<br/>
<button onclick="calculate()">Calculate</button>
<p id="result"></p>
<div class="install-links">
  <a href="trim-tracker.html">Go to Trim Tracker</a>
  <a class="nav-button" href="help.html">How to Use the App</a>
</div>
<div style="margin-top: 0.6em; color: #ccc; font-size: 0.95em; max-width: 600px; margin-left: auto; margin-right: auto;">
  <strong>Note:</strong> For the Trim Tracker import feature to work properly, please use the calculator and tracker in your preferred language only. Mixing languages may cause data sync issues.
</div>

<div id="payPeriodLabel" style="margin-top: 0.6em; color: #0f0; font-weight: bold;"></div>
<table id="sessionTable">
  <thead>
    <tr>
      <th>Date &amp; Day</th>
      <th>Grams</th>
      <th>Bonus Pay</th>
      <th>Action</th>
    </tr>
  </thead>
  <tbody></tbody>
  <tfoot>
    <tr>
      <td colspan="2"><strong>Total</strong></td>
      <td id="totalBonusPay">$0.00</td>
    </tr>
  </tfoot>
</table>
<div style="margin-top: 0.6em;">
  <input type="file" id="csvInput" accept=".csv" style="display:none" onchange="importCSV(event)">
  <button onclick="document.getElementById('csvInput').click()" style='background-color:#28a745;color:white;padding: 0.45em 1em;border:none;border-radius:4px;cursor:pointer;font-weight:bold;'>Import CSV</button>
</div>

<div style="margin-top: 0.6em;">
  <button onclick="downloadCSV()" style='background-color:green;color:white;padding: 0.45em 1em;border:none;border-radius:4px;cursor:pointer;font-weight:bold;'>Export CSV</button>
</div>

<div style="margin-top: 0.6em;">
  <button onclick="clearCurrentPayPeriod()" style='background-color:red;color:white;padding: 0.5em 1em;border:none;border-radius:4px;cursor:pointer;'>Clear Current Pay Period</button>
</div>

<div style="margin-top: 1.2em; border-top: 1px solid #444; padding-top: 1em;">
  <h2 onclick="togglePayCalc()" style="color:#0f0; cursor:pointer;">Hourly &amp; Pay Averages ▼</h2>
  <div id="payCalcSection" style="display:none;">
    <p>Enter your hourly pay and hours worked, then choose a date range:</p>
    <label>Hourly Rate: <input id="hourlyRate" step="0.01" type="number"/></label><br/>
    <label>Overtime Hours: <input id="overtimeHours" step="0.1" type="number"/></label><br/>
    <label>Total Hours Worked: <input id="totalHours" step="0.1" type="number"/></label><br/>
    <label>Start Date: <input id="startDate" type="date"/></label><br/>
    <label>End Date: <input id="endDate" type="date"/></label><br/>
    <button onclick="calculateAverages()">Calculate Averages</button>
    <div id="averageResults" style="margin-top: 0.6em; text-align: left;"></div>
  </div>
</div>
<div style="margin-top: 4em; padding-top: 2em; border-top: 1px solid #444;">
  <h2 style="color: #0f0;">About the Creator</h2>
  <p style="max-width: 600px; margin: 0 auto; font-size: 1em; line-height: 1.6;">
    Hi, my name is Andrew, and I work as a professional trimmer at NorCal Cannabis.
    I created the NorCal Trim Calculator to help simplify bonus pay calculations and make it easier for trimmers
    to track their daily progress.
    <br/><br/>
    This tool was designed to be practical, user-friendly, and efficient — helping workers stay organized and informed.
    My goal is to support the trimming community with simple tech solutions that make a real difference on the job.
  </p>
</div>

<script>
function calculateBonus(grams) {
  let bonusPay = 0;
  if (grams > 1587) {
    bonusPay += (grams - 1587) * 0.11;
    bonusPay += (1587 - 1134) * 0.05;
  } else if (grams > 1134) {
    bonusPay += (grams - 1134) * 0.05;
  }
  return bonusPay;
}
function calculate() {
  const grams = parseFloat(document.getElementById('grams').value);
  if (isNaN(grams) || grams <= 0) {
    document.getElementById('result').innerText = 'Please enter a valid number of grams.';
    return;
  }
  const bonusPay = calculateBonus(grams);
  document.getElementById('result').innerText = 'Bonus Pay: $' + bonusPay.toFixed(2);
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0];
  const entry = { date: dateStr, grams: grams, bonusPay: bonusPay.toFixed(2) };
  let history = JSON.parse(localStorage.getItem('trimHistory')) || [];
  history.push(entry);
  localStorage.setItem('trimHistory', JSON.stringify(history));
  updateSessionTable();
  const scrollTarget = document.getElementById('sessionTable');
  if (scrollTarget) scrollTarget.scrollIntoView({ behavior: 'smooth' });
  document.getElementById('grams').value = '';
}
function updateSessionTable() {
  const history = JSON.parse(localStorage.getItem('trimHistory')) || [];
  const tbody = document.getElementById('sessionTable').getElementsByTagName('tbody')[0];
  tbody.innerHTML = '';
  let totalBonusPay = 0;

  const grouped = groupByPayPeriod(history);
  const createEntryRow = (entry, index) => {
    const row = document.createElement('tr');
    row.id = 'row-' + index;

    const dateCell = document.createElement('td');
    dateCell.textContent = entry.date;
    dateCell.contentEditable = true;
    dateCell.addEventListener('blur', function () {
      const updatedDate = this.textContent.trim();
      if (/^\d{4}-\d{2}-\d{2}$/.test(updatedDate)) {
        if (history[index].date !== updatedDate) {
          history[index].date = updatedDate;
          localStorage.setItem('trimHistory', JSON.stringify(history));
          updateSessionTable();
        }
      } else {
        alert("Invalid date format. Please use YYYY-MM-DD.");
        this.textContent = history[index].date;
      }
    });
    row.appendChild(dateCell);
    const gramsCell = document.createElement('td');
    gramsCell.textContent = entry.grams;
    gramsCell.contentEditable = true;
    gramsCell.addEventListener('blur', function () {
      const newGrams = parseFloat(this.textContent.trim());
      if (!isNaN(newGrams) && newGrams >= 0) {
        if (history[index].grams !== newGrams) {
          history[index].grams = newGrams;
          const newBonus = calculateBonus(newGrams);
          history[index].bonusPay = newBonus.toFixed(2);
          localStorage.setItem('trimHistory', JSON.stringify(history));
          updateSessionTable();
        }
      } else {
        alert("Please enter a valid number of grams.");
        this.textContent = history[index].grams;
      }
    });
    row.appendChild(gramsCell);

    const bonusPayCell = document.createElement('td');
    bonusPayCell.textContent = '$' + parseFloat(entry.bonusPay || 0).toFixed(2);
    row.appendChild(bonusPayCell);

    const actionCell = document.createElement('td');
    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'Delete';
    deleteBtn.className = 'delete-button';
    deleteBtn.onclick = () => {
      if (confirm("Are you sure you want to delete this entry?")) {
        deleteEntry(index);
      }
    };
    actionCell.appendChild(deleteBtn);
    row.appendChild(actionCell);

    return row;
  };
  const currentPeriodKey = getCurrentPayPeriod().start;
  const currentGroup = grouped[currentPeriodKey];

  if (currentGroup && currentGroup.entries.length > 0) {
    const headerRow = document.createElement('tr');
    const headerCell = document.createElement('th');
    headerCell.setAttribute('colspan', '4');
    headerCell.style.textAlign = 'left';
    headerCell.textContent = currentGroup.label;
    headerRow.appendChild(headerCell);
    tbody.appendChild(headerRow);

    currentGroup.entries.forEach(([entry, index]) => {
      tbody.appendChild(createEntryRow(entry, index));
      totalBonusPay += parseFloat(entry.bonusPay || 0);
    });
  }

  Object.keys(grouped).filter(k => k !== currentPeriodKey).forEach(key => {
    const section = grouped[key];
    const header = document.createElement('div');
    header.className = 'past-period-header';
    header.textContent = section.label + ' ▼';
    header.onclick = function () {
      const next = this.nextElementSibling;
      next.classList.toggle('open');
      this.textContent = section.label + (next.classList.contains('open') ? ' ▲' : ' ▼');
    };
    const content = document.createElement('div');
    content.className = 'past-period-content';
    section.entries.forEach(([entry, index]) => {
      const row = createEntryRow(entry, index);
      content.appendChild(row);
    });
    const container = document.getElementById('sessionTable').parentNode;
    container.insertBefore(header, document.getElementById('sessionTable').nextSibling);
    container.insertBefore(content, header.nextSibling);
  });

  document.getElementById('totalBonusPay').textContent = '$' + totalBonusPay.toFixed(2);
}
function getCurrentPayPeriod() {
  const base = new Date("2025-04-14T00:00:00");
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const diffDays = Math.floor((today - base) / (1000 * 60 * 60 * 24));
  const periodIndex = Math.floor(diffDays / 14);
  const periodStart = new Date(base);
  periodStart.setDate(base.getDate() + periodIndex * 14);
  const periodEnd = new Date(periodStart);
  periodEnd.setDate(periodStart.getDate() + 13);
  return {
    start: periodStart.toISOString().split('T')[0],
    end: periodEnd.toISOString().split('T')[0],
    label: 'Pay Period: ' + periodStart.toISOString().split('T')[0] + ' – ' + periodEnd.toISOString().split('T')[0]
  };
}
function groupByPayPeriod(history) {
  const currentPeriod = getCurrentPayPeriod();
  const currentStart = new Date(currentPeriod.start);
  const currentEnd = new Date(currentPeriod.end);
  currentEnd.setHours(23, 59, 59, 999);

  const currentPeriodEntries = [];
  const pastGroups = {};

  history.forEach((entry, index) => {
    const d = new Date(entry.date);
    d.setHours(0, 0, 0, 0);
    if (d >= currentStart && d <= currentEnd) {
      currentPeriodEntries.push([entry, index]);
    } else {
      const base = new Date("2025-04-14T00:00:00");
      const offset = Math.floor((d - base) / (1000 * 60 * 60 * 24));
      const periodOffset = Math.floor(offset / 14);
      const periodStart = new Date(base);
      periodStart.setDate(base.getDate() + periodOffset * 14);
      const periodEnd = new Date(periodStart);
      periodEnd.setDate(periodStart.getDate() + 13);
      const key = periodStart.toISOString().split('T')[0];
      const label = 'Pay Period: ' + key + ' – ' + periodEnd.toISOString().split('T')[0];
      if (!pastGroups[key]) pastGroups[key] = { label, entries: [] };
      pastGroups[key].entries.push([entry, index]);
    }
  });

  const grouped = {};
  grouped[currentPeriod.start] = { label: currentPeriod.label, entries: currentPeriodEntries };

  Object.keys(pastGroups).sort((a, b) => new Date(b) - new Date(a)).forEach(key => {
    grouped[key] = pastGroups[key];
  });

  return grouped;
}
function deleteEntry(index) {
  const history = JSON.parse(localStorage.getItem('trimHistory')) || [];
  history.splice(index, 1);
  localStorage.setItem('trimHistory', JSON.stringify(history));
  updateSessionTable();
}

function clearCurrentPayPeriod() {
  const period = getCurrentPayPeriod();
  const periodStart = new Date(period.start);
  const periodEnd = new Date(period.end);
  periodEnd.setHours(23, 59, 59, 999);

  let history = JSON.parse(localStorage.getItem('trimHistory')) || [];
  history = history.filter(entry => {
    const d = new Date(entry.date);
    d.setHours(0, 0, 0, 0);
    return d < periodStart || d > periodEnd;
  });
  localStorage.setItem('trimHistory', JSON.stringify(history));
  updateSessionTable();
}
function downloadCSV() {
  const history = JSON.parse(localStorage.getItem('trimHistory')) || [];
  if (history.length === 0) {
    alert("No data to export.");
    return;
  }

  const headers = ["Date", "Grams", "Bonus"];
  const rows = history.map(entry => [entry.date, entry.grams, parseFloat(entry.bonusPay || 0).toFixed(2)]);
  let csvContent = "data:text/csv;charset=utf-8," + headers.join(",") + "\n" + rows.map(e => e.join(",")).join("\n");

  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "norcal_trim_data.csv");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
function importCSV(event) {
  const file = event.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = function(e) {
    const text = e.target.result;
    const lines = text.split('\n').slice(1);
    let imported = [];
    lines.forEach(line => {
      const [date, grams, bonus] = line.trim().split(',');
      if (date && grams && bonus) {
        imported.push({
          date: date.trim(),
          grams: parseFloat(grams.trim()),
          bonusPay: parseFloat(bonus.trim()).toFixed(2)
        });
      }
    });
    let history = JSON.parse(localStorage.getItem('trimHistory')) || [];
    history = history.concat(imported);
    localStorage.setItem('trimHistory', JSON.stringify(history));
    updateSessionTable();
  };
  reader.readAsText(file);
  event.target.value = '';
}
document.getElementById('import-tracker-total').addEventListener('click', () => {
  const todayISO = new Date().toISOString().split('T')[0];
  const trackerTotal = localStorage.getItem('trimTrackerDailyTotal-' + todayISO);
  if (trackerTotal) {
    document.getElementById('grams').value = trackerTotal;
    alert("Imported " + trackerTotal + "g from Trim Tracker.");
  } else {
    alert("No trim tracker total found for today.");
  }
});

window.addEventListener('load', () => {
  const period = getCurrentPayPeriod();
  const label = document.getElementById("payPeriodLabel");
  if (label) label.textContent = period.label;
  updateSessionTable();
});
</script>
</body>
</html>
